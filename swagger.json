swagger: '2.0'
info:
  description: |
    This is a sample Petstore server.  You can find 
    out more about Swagger at 
    [http://swagger.io](http://swagger.io) or on 
    [irc.freenode.net, #swagger](http://swagger.io/irc/).
  version: 1.0.0
  title: Swagger Petstore
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
# host: petstore.swagger.io
# basePath: /v2
tags:
- name: pet
  description: Everything about your Pets
  externalDocs:
    description: Find out more
    url: http://swagger.io
- name: store
  description: Access to Petstore orders
- name: user
  description: Operations about user
  externalDocs:
    description: Find out more about our store
    url: http://swagger.io
# schemes:
# - http
paths:
  /ml_models:
    get:
      tags:
      - mlModel
      summary: Find mlModels
      description: For valid response try integer IDs with value >= 1 and <= 10.\
        \ Other values will generated exceptions
      produces:
      - application/json
      - application/xml
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/MlModel'
        400:
          description: Invalid ID supplied
        404:
          description: MlModel not found
    post:
      tags:
      - mlModel
      summary: Create a new mlModel
      operationId: createMlModel
      consumes:
      - application/json
      - application/xml
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: MlModel object
        required: true
        schema:
          $ref: '#/definitions/MlModel'
      responses:
        405:
          description: Invalid input
  /mlModels/{petId}:
    get:
      tags:
      - mlModel
      summary: Find mlModel by ID
      description: Returns a single mlModel
      operationId: getPetById
      produces:
      - application/json
      - application/xml
      parameters:
      - name: petId
        in: path
        description: ID of mlModel to return
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/MlModel'
        400:
          description: Invalid ID supplied
        404:
          description: MlModel not found
      security:
      - api_key: []
    delete:
      tags:
      - mlModel
      summary: Deletes a mlModel
      operationId: deletePet
      produces:
      - application/json
      - application/xml
      parameters:
      - name: api_key
        in: header
        required: false
        type: string
      - name: petId
        in: path
        description: MlModel id to delete
        required: true
        type: integer
        format: int64
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: MlModel not found
      security:
      - petstore_auth:
        - write:pets
        - read:pets
    put:
      tags:
      - mlModel
      summary: Update an existing mlModel
      operationId: updateMlModel
      consumes:
      - application/json
      - application/xml
      produces:
      - application/json
      - application/xml
      parameters:
      - name: mlModelId
        in: path
        description: MlModel id to delete
        required: true
        type: integer
        format: int64
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: MlModel not found
        405:
          description: Validation exception
  /mlModels/{mlModelId}/uploadCsv:
    post:
      tags:
      - mlModel
      summary: uploads a csv
      operationId: uploadCsv
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: mlModelId
        in: path
        description: ID of mlModel to update
        required: true
        type: integer
        format: int64
      - name: file
        in: formData
        description: file to upload
        required: true
        type: file
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/ApiResponse'
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: Created user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/createWithArray:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: List of user object
        required: true
        schema:
          type: array
          items:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/createWithList:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: List of user object
        required: true
        schema:
          type: array
          items:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            type: string
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        400:
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      produces:
      - application/json
      - application/xml
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: path
        description: The name that needs to be fetched. Use user1 for testing. 
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        400:
          description: Invalid username supplied
        404:
          description: User not found
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        type: string
      - in: body
        name: body
        description: Updated user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        400:
          description: Invalid user supplied
        404:
          description: User not found
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        type: string
      responses:
        400:
          description: Invalid username supplied
        404:
          description: User not found
  /ml_models/{id}:
    get:
      tags:
      - ml_model
      summary: Get ml_model by ml_model id
      operationId: getMlModelById
      produces:
      - application/json
      - application/xml
      parameters:
      - name: id
        in: path
        description: The id that needs to be fetched. Use 1 for testing. 
        required: true
        type: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/MlModel'
        400:
          description: Invalid ml_model id supplied
        404:
          description: MlModel not found
securityDefinitions:
  petstore_auth:
    type: oauth2
    authorizationUrl: http://petstore.swagger.io/oauth/dialog
    flow: implicit
    scopes:
      write:pets: modify pets in your account
      read:pets: read your pets
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      userStatus:
        type: integer
        format: int32
        description: User Status
    xml:
      name: User
  MlModel:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
        example: "categorize Tweets"
    xml:
      name: MlModel
  HyperParameter:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
        example: activationFunction
      category:
        $ref: '#/definitions/HyperParameter'
    xml:
      name: HyperParameter
  TrainData:
    type: object
    properties:
      id:
        type: integer
        format: int64
      y:
        type: integer
        example: 1
      parameters:
        type: array
        xml:
          name: parameter
          wrapped: true
        items:
          $ref: '#/definitions/Parameter'
      category:
        $ref: '#/definitions/TrainData'
    xml:
      name: TrainData
  Parameter:
    type: object
    required:
    - name
    properties:
      id:
        type: integer
        format: int64
      trainData:
        $ref: '#/definitions/TrainData'
      name:
        type: string
        example: age
    xml:
      name: Parameter
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /kenta-s/mllite/1.0.0
schemes:
 - https
 - http
